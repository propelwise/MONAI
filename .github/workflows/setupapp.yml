name: deploy

on:
  # full tests for all the important branches
  push:
    branches:
      - dev
      - main
      - releasing/*
      - feature/*

concurrency:
  # automatically cancel the previously triggered workflows when there's a newer version
  group: deploy-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # caching of these jobs:
  #   - docker-py3-pip- (shared)
  #   - ubuntu py36 37 38-pip-
  #   - os-latest-pip (shared)
  coverage-py3:
    if: github.repository == 'Project-MONAI/MONAI'
    container:
      image: nvcr.io/nvidia/pytorch:20.03-py3  # CUDA 10.2
      options: --gpus all
    runs-on: [self-hosted, linux, x64, common]
    steps:
    - uses: actions/checkout@v2
    - name: cache weekly timestamp
      id: pip-cache
      run: |
        echo "::set-output name=datew::$(date '+%Y-%V')"
    - name: cache for pip
      uses: actions/cache@v2
      id: cache
      with:
        path: |
          ~/.cache/pip
          ~/.cache/torch
        key: docker-py3-pip-${{ steps.pip-cache.outputs.datew }}
    - name: Install the dependencies
      run: |
        which python
        python -m pip install --upgrade pip wheel
        python -m pip uninstall -y torch torchvision
        python -m pip install torch==1.9.0 torchvision==0.10.0
        python -m pip install -r requirements-dev.txt
    - name: Run unit tests report coverage
      run: |
        python -m pip list
        export LAUNCH_DELAY=$[ $RANDOM % 16 * 60 ]
        echo "Sleep $LAUNCH_DELAY"
        sleep $LAUNCH_DELAY
        nvidia-smi
        export CUDA_VISIBLE_DEVICES=$(python -m tests.utils)
        echo $CUDA_VISIBLE_DEVICES
        trap 'if pgrep python; then pkill python; fi;' ERR
        python -c $'import torch\na,b=torch.zeros(1,device="cuda:0"),torch.zeros(1,device="cuda:1");\nwhile True:print(a,b)' > /dev/null &
        python -c "import torch; print(torch.__version__); print('{} of GPUs available'.format(torch.cuda.device_count()))"
        python -c 'import torch; print(torch.rand(5, 3, device=torch.device("cuda:0")))'
        BUILD_MONAI=0 ./runtests.sh --coverage --net  # integration tests with coverage report
        coverage xml
        if pgrep python; then pkill python; fi
      shell: bash
    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
        fail_ci_if_error: false
        file: ./coverage.xml
